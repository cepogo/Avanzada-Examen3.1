name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-mysql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push MySQL image
        uses: docker/build-push-action@v4
        with:
          context: ./Database
          file: ./Database/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/clinica-mysql:latest

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build backend with Maven
        run: |
          cd ProyectoClinica
          mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./ProyectoClinica
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/clinica-backend:latest

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install dependencies and build frontend
        run: |
          cd clinica_frontend
          npm install
          export CI=false
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./clinica_frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/clinica-frontend:latest

  deploy:
    needs: [build-mysql, build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master

      - name: Start Minikube
        run: |
          minikube start --driver=docker
          minikube status
          kubectl config use-context minikube
          kubectl cluster-info

      - name: Clean existing resources
        run: |
          kubectl delete deployments,services,pvc,pv --all || true

      - name: Update Kubernetes configurations
        run: |
          # Actualizar las im√°genes en los archivos YAML
          for file in k8s/*deployment.yaml; do
            sed -i "s|image:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/clinica-$(basename $file .yaml | cut -d'-' -f1):latest|g" $file
          done

      - name: Deploy MySQL
        run: |
          kubectl apply -f k8s/mysql-pvc.yaml --validate=false
          kubectl apply -f k8s/mysql-deployment.yaml --validate=false
          kubectl apply -f k8s/mysql-service.yaml --validate=false
          echo "Waiting for MySQL..."
          kubectl wait --for=condition=ready pod -l app=mysql --timeout=300s

      - name: Initialize Database
        run: |
          MYSQL_POD=$(kubectl get pod -l app=mysql -o jsonpath="{.items[0].metadata.name}")
          echo "Copying database script..."
          kubectl cp Database/script.sql $MYSQL_POD:/tmp/
          echo "Creating database..."
          kubectl exec $MYSQL_POD -- mysql -h localhost -P 3306 -u root -proot < /tmp/script.sql

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/backend-deployment.yaml --validate=false
          kubectl apply -f k8s/backend-service.yaml --validate=false
          kubectl apply -f k8s/frontend-deployment.yaml --validate=false
          kubectl apply -f k8s/frontend-service.yaml --validate=false
          
          echo "Waiting for deployments..."
          kubectl wait --for=condition=ready pod -l app=backend --timeout=300s
          kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s

      - name: Verify Deployment
        run: |
          echo "All resources:"
          kubectl get all
          
          echo "Pod logs:"
          for pod in $(kubectl get pods -o name); do
            echo "=== $pod logs ==="
            kubectl logs $pod --tail=50 || true
          done
          
          echo "Service URLs:"
          minikube service list
          echo "Frontend URL: $(minikube service frontend --url)"
          echo "Backend URL: $(minikube service backend --url)"