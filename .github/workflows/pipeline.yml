name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: proyectoclinica
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Initialize MySQL
        run: |
          mysql -h127.0.0.1 -P3306 -uroot -proot < Database/script.sql
          
      - name: Build backend with Maven
        run: |
          cd ProyectoClinica
          mvn clean package -DskipTests
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./ProyectoClinica
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/clinica-backend:latest

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      - name: Install dependencies and build frontend
        run: |
          cd clinica_frontend
          npm install
          export CI=false
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./clinica_frontend
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/clinica-frontend:latest

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Start Minikube
        uses: medyagh/setup-minikube@master
        
      - name: Deploy to Kubernetes
        run: |
          # Limpiar deployments y servicios existentes
          kubectl delete deployments,services --all || true
          
          # Desplegar backend
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/backend-service.yaml
          
          echo "Waiting for backend to be ready..."
          kubectl wait --for=condition=ready pod -l app=backend --timeout=300s
          
          # Desplegar frontend
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-service.yaml
          
          echo "Waiting for frontend to be ready..."
          kubectl wait --for=condition=ready pod -l app=frontend --timeout=300s
          
          # Verificar estado final
          echo "Final deployment status:"
          kubectl get all
          
          echo "Pod logs:"
          for pod in $(kubectl get pods -o name); do
            echo "=== $pod logs ==="
            kubectl logs $pod --tail=20
          done
          
          echo "Service URLs:"
          minikube service list
          
          echo "Deployment completed successfully"